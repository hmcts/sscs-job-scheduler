plugins {
  id 'java-library'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.4.RELEASE'
  id 'org.owasp.dependencycheck' version '3.1.1'
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'org.sonarqube' version '2.6.1'
  id 'maven'
  id 'maven-publish'
  id 'com.jfrog.bintray' version '1.8.0' apply true
}

group = 'uk.gov.hmcts.reform'
version = '1.5.3'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def springBootVersion = '1.5.10.RELEASE'

def pomConfig = {
  licenses {
    license {
      name "MIT License"
      url "http://www.opensource.org/licenses/mit-license.php"
      distribution "repo"
    }
  }

  scm {
    url "https://github.com/hmcts/sscs-job-scheduler"
  }
}

sourceSets {

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

compileJava {
  options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
  options.compilerArgs << "-Xlint:unchecked"
}

compileIntegrationTestJava {
  options.compilerArgs << "-Xlint:unchecked"
}

task integration(type: Test) {
  description = "Runs Integration Tests"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

checkstyle {
  toolVersion = '8.4'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

project.tasks['sonarqube'].dependsOn test, integration
sonarqube {
  properties {
    property "sonar.projectName", "Reform :: SSCS job scheduler"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
    property 'sonar.coverage.exclusions', "**/src/main/java/uk/gov/hmcts/reform/sscs/jobscheduler/config/**"
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
}

repositories {
  mavenLocal()
  jcenter()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
}

publishing {
  publications {
    Main(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId 'sscs-job-scheduler'
      version project.version

      pom.withXml {
        def root = asNode()
        root.appendNode('description', 'SSCS job scheduler')
        root.appendNode('name', 'SSCS job scheduler')
        root.appendNode('url', 'https://github.com/hmcts/sscs-job-scheduler')
        root.children().last() + pomConfig
      }
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')
  publications = ['Main']
  publish = true
  pkg {
    repo = 'hmcts-maven'
    name = 'sscs-job-scheduler'
    userOrg = 'hmcts'
    licenses = ['MIT']
    vcsUrl = 'https://github.com/hmcts/sscs-job-scheduler'
    version {
      name = project.version
    }
  }
}

def versions = [
  reformLogging: '2.0.2',
  springBoot   : springBootVersion,
]

dependencies {
  compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.0'

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'

  compile group: 'javax.inject', name: 'javax.inject', version: '1'

  compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: '1.4.6.RELEASE'

  def withoutTomcat = { exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat' }
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix-dashboard', version: '1.4.6.RELEASE', withoutTomcat 

  compile group: 'org.springframework', name: 'spring-tx', version: '5.0.6.RELEASE'

  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.0'
  testCompile group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '2.12.0'
  testCompile group: 'org.json', name: 'json', version: '20171018'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'

  integrationTestCompile sourceSets.main.runtimeClasspath
}

jar {
  archiveName 'sscs-job-scheduler.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
