plugins {
  id 'java'
  id 'java-library'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.owasp.dependencycheck' version '10.0.4'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '4.3.0.3225'
  id 'maven-publish'
}

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "DEV-SNAPSHOT"

group = 'com.github.hmcts'
version = buildNumber

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

compileJava {
  options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
  options.compilerArgs << "-Xlint:unchecked"
}

compileIntegrationTestJava {
  options.compilerArgs << "-Xlint:unchecked"
}

tasks.register('integration', Test) {
  description = "Runs Integration Tests"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

checkstyle {
  toolVersion = '9.3'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
  reportsDir = layout.buildDirectory.dir("reports/pmd").get().asFile
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacoco {
  toolVersion = "0.8.10"
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks.named('sonarqube') {
  dependsOn test, integration, jacocoTestReport
}

sonarqube {
  properties {
    property "sonar.projectName", "SSCS - SSCS job scheduler"
    property "sonar.projectKey", "SSCSJS"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.exclusions", "**/src/main/java/uk/gov/hmcts/reform/sscs/jobscheduler/config/**"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    retirejs {
      enabled = false
    }
    ossIndex {
      enabled = false
    }
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

tasks.withType(Copy).configureEach { duplicatesStrategy DuplicatesStrategy.WARN }

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

repositories {
  mavenCentral()
  mavenLocal()
  mavenCentral()

  maven {
    url 'https://repo.spring.io/libs-milestone'
  }

  // jitpack was last resort but replaced bintray
  // see: https://github.com/jitpack/jitpack.io/issues/1939
  maven { url 'https://jitpack.io' }

}

publishing {
  publications {
    Main(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId 'sscs-job-scheduler'
      version project.version
    }
  }
}

configurations.configureEach {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
                details.useVersion '2.17.2'
            }
        }
    }
}

dependencyManagement {
  dependencies {

    // CVE-2023-1370
    dependency group: 'net.minidev', name: 'json-smart', version: '2.5.1'

    // CVE-2023-6378, CVE-2023-6481
    dependencySet(group: 'ch.qos.logback', version: '1.2.13') {
      entry 'logback-core'
      entry 'logback-classic'
    }

    // CVE-2022-1471, CVE-2022-25857, CVE-2022-38749, CVE-2022-38751, CVE-2022-38752, CVE-2022-41854, CVE-2022-38750
    dependency group: 'org.yaml', name: 'snakeyaml', version: '2.0'

    // CVE-2021-25122, CVE-2021-41079, CVE-2021-42340, CVE-2022-29885, CVE-2022-42252, CVE-2022-45143, CVE-2023-44487, CVE-2023-46589, CVE-2020-9484, CVE-2021-25329, CVE-2022-23181, CVE-2021-30640, CVE-2022-34305, CVE-2023-41080, CVE-2021-33037, CVE-2023-42795, CVE-2023-45648, CVE-2024-21733, CVE-2023-28708, CVE-2021-43980
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.86') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-websocket'
    }
  }
}

def versions = [
        springBoot   : '2.7.18',
]

dependencies {
  implementation group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'

  implementation group: 'com.github.hmcts', name: 'java-logging', version: '6.1.6'
  implementation group: 'com.github.hmcts', name: 'reform-api-standards', version: '0.5.2', {
    exclude group: 'com.google.guava', module: 'guava'
  }

  implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
  implementation group: 'com.google.guava', name: 'guava', version: '33.3.1-jre'
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
  implementation group: 'org.springframework', name: 'spring-context-support', version: '5.3.39'

  implementation group: 'org.springframework', name: 'spring-tx', version: '5.3.39'

  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.26.3'
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '3.0.1'
  testImplementation group: 'org.json', name: 'json', version: '20240303'
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.13.0'
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.13.0'
  testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.1'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.11.0'
  testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.11.0'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.11.0'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.11.0'

  integrationTestImplementation(sourceSets.test.output)
  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  // CVE-2023-2976, CVE-2020-8908
  checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: checkstyle.toolVersion
  checkstyle group: 'com.google.guava', name: 'guava', version: '32.1.1-jre'
}

